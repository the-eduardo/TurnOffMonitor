name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev
      - name: Build application
        run: |
          go mod tidy
          go install fyne.io/fyne/v2/cmd/fyne@latest
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            fyne package -os windows -icon icon.png
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            fyne package -os linux -icon icon.png
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            fyne package -os darwin -icon icon.png
          fi
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: amd64
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-app
          path: |
            *.exe
            *.AppImage
            *.app

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-latest-app/*.exe
          asset_name: MyApp_Windows.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-latest-app/*.AppImage
          asset_name: MyApp_Linux.AppImage
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-latest-app/*.app
          asset_name: MyApp_macOS.app
          asset_content_type: application/octet-stream